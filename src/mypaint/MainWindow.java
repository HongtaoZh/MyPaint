/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mypaint;

import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import static java.lang.Math.abs;
import java.awt.MouseInfo;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;

/**
 *
 * @author Tao
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        canvas.createBufferStrategy(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawers = new javax.swing.ButtonGroup();
        color = new javax.swing.ButtonGroup();
        about = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pen = new javax.swing.JToggleButton();
        canvas = new java.awt.Canvas();
        rect = new javax.swing.JToggleButton();
        sizeChooser = new javax.swing.JSpinner();
        x = new javax.swing.JLabel();
        y = new javax.swing.JLabel();
        colorChooser = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        about.setResizable(false);
        about.setSize(new java.awt.Dimension(347, 200));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("MyPaint ver 1.0\n--------------------------------\nthis awesome painting application is\ndeveloped solely by the computer genius\nHongtao. ENJOY!");
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout aboutLayout = new javax.swing.GroupLayout(about.getContentPane());
        about.getContentPane().setLayout(aboutLayout);
        aboutLayout.setHorizontalGroup(
            aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        aboutLayout.setVerticalGroup(
            aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ShowCoordinates(evt);
            }
        });

        drawers.add(pen);
        pen.setText("pen");
        pen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penActionPerformed(evt);
            }
        });

        canvas.setBackground(new java.awt.Color(255, 255, 255));
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasPressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasClicked(evt);
            }
        });
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                canvasMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasDragged(evt);
            }
        });

        drawers.add(rect);
        rect.setText("rect");
        rect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectActionPerformed(evt);
            }
        });

        sizeChooser.setModel(new javax.swing.SpinnerNumberModel(10, 1, 50, 1));

        x.setText("x:");

        y.setText("y:");

        colorChooser.setBackground(new java.awt.Color(255, 0, 0));
        colorChooser.setText("color");
        colorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserActionPerformed(evt);
            }
        });

        jMenu2.setText("MyPaint");

        jMenuItem2.setText("save");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saving(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFile(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem1.setText("about");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(y)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(sizeChooser)
                                .addComponent(colorChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rect)
                .addGap(238, 238, 238)
                .addComponent(colorChooser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sizeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(x)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(y)
                .addGap(38, 38, 38))
            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void penActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penActionPerformed
        // TODO add your handling code here:
        drawState.mode = Mode.pen;
    }//GEN-LAST:event_penActionPerformed

    private void rectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectActionPerformed
        // TODO add your handling code here:
        drawState.mode = Mode.rect;
    }//GEN-LAST:event_rectActionPerformed

    private void canvasClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_canvasClicked

    private void canvasDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasDragged
        // TODO add your handling code here:
        switch(drawState.mode){
            case pen:{
                Point p = new Point(evt.getX(),evt.getY(),(int)sizeChooser.getValue(),drawState.color);
                drawables.add(p);
                render();
                break;
            }
            case rect:{
                BufferStrategy bufferstrategy = canvas.getBufferStrategy();
                Graphics graphics = bufferstrategy.getDrawGraphics();
                canvas.paint(graphics);
                for(Drawable d:drawables){
                    d.draw(graphics);
                }
                int tempX;
                int tempY;
                if(dragInitX<=evt.getX()){
                    tempX = dragInitX;
                }else{
                    tempX = evt.getX();
                }
                if(dragInitY<=evt.getY()){
                    tempY = dragInitY;
                }else{
                    tempY = evt.getY();
                }
                graphics.setColor(drawState.color);
                graphics.drawRect(tempX, tempY, abs(evt.getX()-dragInitX), abs(evt.getY()-dragInitY));
                
                graphics.dispose();
                
                bufferstrategy.show();
            }
        }
    }//GEN-LAST:event_canvasDragged

    private void canvasPressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasPressed
        // TODO add your handling code here:
        switch(drawState.mode){
            case pen:{
                Point p = new Point(evt.getX(),evt.getY(),(int)sizeChooser.getValue(),drawState.color);
                drawables.add(p);
                render();
                break;
            }
            case rect:{
                render();
                dragInitX = evt.getX();
                dragInitY = evt.getY();
                break;
            }
        }
    }//GEN-LAST:event_canvasPressed

    private void canvasReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasReleased
        // TODO add your handling code here:
        switch(drawState.mode){
            case rect:{
                int x = MouseInfo.getPointerInfo().getLocation().x-this.getX();
                int y = MouseInfo.getPointerInfo().getLocation().y-this.getY();
                
                int tempX;
                int tempY;
                if(dragInitX<=evt.getX()){
                    tempX = dragInitX;
                }else{
                    tempX = evt.getX();
                }
                if(dragInitY<=evt.getY()){
                    tempY = dragInitY;
                }else{
                    tempY = evt.getY();
                }
                Rect rect = new Rect(tempX,tempY,abs(dragInitX-evt.getX()),abs(dragInitY-evt.getY()), drawState.color);
                System.out.println("x: "+x+"y: "+y);
                System.out.println(abs(dragInitX-x));
                System.out.println(abs(dragInitY-y));
                drawables.add(rect);
                render();
            }
        }
        
    }//GEN-LAST:event_canvasReleased

    private void canvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseMoved
        // TODO add your handling code here:
        int xx = MouseInfo.getPointerInfo().getLocation().x-canvas.getLocationOnScreen().x;
        int yy = MouseInfo.getPointerInfo().getLocation().y-canvas.getLocationOnScreen().y;
        if(xx < 0) xx = 0;
        if(yy<0) yy = 0;
        x.setText("x: "+xx);
        y.setText("y: "+yy);
        
    }//GEN-LAST:event_canvasMouseMoved

    private void colorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserActionPerformed
        // TODO add your handling code here:
        JColorChooser jcc = new JColorChooser();
        drawState.color = jcc.showDialog(null,"please choose a color",Color.RED);
        colorChooser.setBackground(drawState.color);
         
    }//GEN-LAST:event_colorChooserActionPerformed

    private void saveFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFile
        // TODO add your handling code here:
        
        JFileChooser jfc = new JFileChooser();
        int returnVal = jfc.showSaveDialog((Component)evt.getSource());
        if(returnVal == JFileChooser.APPROVE_OPTION){
            System.out.println("saved");
            File file = jfc.getSelectedFile();
            BufferedImage im = new BufferedImage(canvas.getWidth(),canvas.getHeight(),BufferedImage.TYPE_INT_RGB);
            Graphics graphics = im.createGraphics();
            graphics.setColor(Color.WHITE);
            graphics.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
            for(Drawable d:drawables){
                d.draw(graphics);
            }
             try {
                //System.out.println("Exporting image: "+imageName);
                FileOutputStream out = new FileOutputStream(file);
                ImageIO.write(im, "png", out);
                out.close();
                } catch (FileNotFoundException e) {
                e.printStackTrace();
                } catch (IOException e) {
                e.printStackTrace();
            }    
                    
        }
        
    }//GEN-LAST:event_saveFile

    private void about(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about
        // TODO add your handling code here:
        about.setLocationRelativeTo(null);
        about.setVisible(true);
        
    }//GEN-LAST:event_about

    private void saving(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saving
        // TODO add your handling code here:
    }//GEN-LAST:event_saving

    private void ShowCoordinates(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowCoordinates
        // TODO add your handling code here:
        int xx = MouseInfo.getPointerInfo().getLocation().x-canvas.getLocationOnScreen().x;
        int yy = MouseInfo.getPointerInfo().getLocation().y-canvas.getLocationOnScreen().y;
        if(xx < 0) xx = 0;
        if(yy<0) yy = 0;
        x.setText("x: "+xx);
        y.setText("y: "+yy);
    }//GEN-LAST:event_ShowCoordinates
    private void render(){
        BufferStrategy bufferstrategy = canvas.getBufferStrategy();
        Graphics graphics = bufferstrategy.getDrawGraphics();
        canvas.paint(graphics);
        for(Drawable d:drawables){
            d.draw(graphics);
        }
       
        graphics.dispose();
        bufferstrategy.show();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    private DrawState drawState = new DrawState(null,Color.RED,null);
   
    private ArrayList<Drawable> drawables = new ArrayList<Drawable>();
    private Drawable temp;
    private int dragInitX;
    private int dragInitY;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog about;
    private java.awt.Canvas canvas;
    private javax.swing.ButtonGroup color;
    private javax.swing.JButton colorChooser;
    private javax.swing.ButtonGroup drawers;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton pen;
    private javax.swing.JToggleButton rect;
    private javax.swing.JSpinner sizeChooser;
    private javax.swing.JLabel x;
    private javax.swing.JLabel y;
    // End of variables declaration//GEN-END:variables
}
